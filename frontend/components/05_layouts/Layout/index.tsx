import { Box, BoxProps } from '@chakra-ui/react'
import { connect } from 'components/hoc'
import { APP_NAME, APP_URL } from 'const'
import Head from 'next/head'
import React, { Children } from 'react'
import { ContainerProps, WithChildren } from 'types'
import { isReactElement } from 'utils'
import Title, { TitleProps } from './Title'

/** Layout Props */
export type LayoutProps = WithChildren & BoxProps
/** Presenter Props */
type PresenterProps = LayoutProps & { title?: TitleProps['children'] }

/** Presenter Component */
const Presenter: React.VFC<PresenterProps> = ({ title, children, ...props }) => (
  <Box {...props}>
    <Head>
      {/* タイトル */}
      <title>{title}</title>
      {/* favicon */}
      <link rel='icon' href='/favicon.ico' />
      {/* ブラウザテーマカラー */}
      <meta name='theme-color' content='#0ea8a8' />
      {/* サイト概要 要約 */}
      <meta name='description' content='Generated by create next app' />
      {/* apple ポータブル端末 アイコン */}
      <link rel='apple-touch-icon' href='/logo192.png' />
      {/* OGP 画像URL */}
      <meta property='og:image' content={APP_URL + '/image.png'} />
      {/* OGP タイトル */}
      <meta name='og:title' content={title} />
      {/* OGP Twitterカード */}
      <meta name='twitter:card' content='summary_large_image' />
    </Head>
    {children}
  </Box>
)

/** Container Component */
const Container: React.VFC<ContainerProps<LayoutProps, PresenterProps>> = ({
  presenter,
  children,
  ...props
}) => {
  let title: TitleProps['children'] | undefined = undefined
  children = Children.map(children, (child) =>
    isReactElement(child) && child.type === Title
      ? (title = `${APP_NAME} - ${child.props.children}`) && undefined
      : child
  )
  return presenter({ title, children, ...props })
}

/** Layout */
export default connect<LayoutProps, PresenterProps>('Layout', Presenter, Container)

// Sub Component
export type { TitleProps }
export { Title }
