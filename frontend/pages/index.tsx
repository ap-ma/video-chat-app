import { ApolloError } from '@apollo/client/errors'
import { CHAT_LENGTH } from 'const'
import { addApolloState, initializeApollo } from 'graphql/apollo'
import {
  InitDocument,
  InitQuery,
  InitQueryVariables,
  useChatHistoryQuery,
  useMeQuery
} from 'graphql/generated'
import { handle } from 'lib/error'
import { GetServerSideProps, NextPage } from 'next'
import Head from 'next/head'
import React from 'react'

const Index: NextPage = () => {
  // ユーザー情報
  const data1 = useMeQuery({ fetchPolicy: 'cache-first' })
  const { error } = useChatHistoryQuery()
  const error1 = error?.graphQLErrors

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      こんにちは
    </div>
  )
}

/**
 * SSR時のみ実行され、ページのレンダリングに使用されるpropsを含むオブジェクトを返す
 *
 * SSR時のみAPIアクセスを行うクエリを実行し、キャッシュを作成する
 * 各コンポーネントにてuseQueryを用いて対象となるqueryが実行される場合、
 * SSR, CSR問わずこの関数にて作成されたキャッシュを参照することができる
 * CSRにおいて、頻繁に更新されることのないデータのqueryについてはこちらでキャッシュを作成し、
 * useQueryのFetchPoliciesをcache-firstとすることで不要なAPIアクセスを削減できる
 *
 * @param context
 * @returns
 */
export const getServerSideProps: GetServerSideProps = async (ctx) => {
  const apolloClient = initializeApollo()
  const cookie = ctx.req.headers.cookie
  const context = { headers: { cookie } }

  const { error } = await apolloClient
    .query<InitQuery, InitQueryVariables>({
      query: InitDocument,
      variables: { limit: CHAT_LENGTH },
      context
    })
    .catch((e) => {
      const error = e as ApolloError
      return { error }
    })

  return handle(error, {
    noError: () => addApolloState(apolloClient, { props: {} }),
    authenticationError: () => ({ redirect: { permanent: false, destination: '/signin' } }),
    // InternalServerError | NetworkError
    _default: () => ({ redirect: { permanent: false, destination: '/error' } })
  })
}

export default Index
