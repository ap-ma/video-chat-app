import { ApolloError } from '@apollo/client/errors'
import { ERROR_PAGE, INDEX_PAGE } from 'const'
import { initializeApollo } from 'graphql/apollo'
import {
  IsAuthenticatedDocument,
  IsAuthenticatedQuery,
  IsAuthenticatedQueryVariables
} from 'graphql/generated'
import { handle } from 'graphql/lib'
import { NextPage } from 'next'
import Head from 'next/head'
import { default as Router } from 'next/router'
import React from 'react'
import { isBrowser, isNode, isNullish } from 'utils'

const Signin: NextPage = () => {
  return (
    <div>
      <Head>
        <title>Sign in</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      サインインページです
    </div>
  )
}

/**
 * 初期ロードではサーバー上のみで実行され、
 * next/link, next/routerを使用してページ遷移する際はクライアント上で実行される
 *
 * リダイレクト等の処理を適切な環境で実行できるため、
 * 常にgetServerSidePropsを用いて処理を行うよりパフォーマンスに優れる
 *
 * @param param0
 * @returns
 */
Signin.getInitialProps = async ({ req, res }) => {
  const apolloClient = initializeApollo()
  const context: Record<string, unknown> = {}

  if (isNode()) {
    const cookie = req?.headers.cookie
    context['headers'] = { cookie }
  }

  const { data, error } = await apolloClient
    .query<IsAuthenticatedQuery, IsAuthenticatedQueryVariables>({
      query: IsAuthenticatedDocument,
      context
    })
    .catch((error) => ({ data: undefined, error: error as ApolloError }))

  if (data?.isAuthenticated || !isNullish(error)) {
    const page = handle(error, {
      noError: () => INDEX_PAGE,
      _default: () => ERROR_PAGE
    })

    if (isNode()) {
      res?.writeHead(307, { Location: page })
      res?.end()
    }

    if (isBrowser()) {
      Router.push(page)
    }
  }

  // 空データを返すと警告が出る
  return { __dummy: undefined }
}

export default Signin
